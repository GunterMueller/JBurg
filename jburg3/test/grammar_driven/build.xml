<project name="JBurg3JavaTests" default="cleanBuildAndTest" basedir=".">

    <target name="init">
        <property file="${user.home}/ant.properties" />
        <property file="../../build.properties" />

        <property name="debug.symbols" value="yes"/>

        <property name="jburg.home" value="${user.home}/projects/jburg3"/>
        <property name="lib.dir" value="${jburg.home}/lib" />
        <property name="jburg.jar" value="${lib.dir}/jburg.jar"/>
        <property name="stringtemplate.jar" value="${user.home}/tools/antlr-4.5.1-complete.jar"/>

        <property name="src.dir" value="./src" />
        <property name="gensrc.dir" value="./gensrc" />
        <property name="classes.dir" value="./classes" />
        <property name="dump.dir" value="./burmdump" />
        <property name="gensrc.dir" value="./gensrc" />
        <property name="junit.log.dir" value="./log" />
        <property name="grammar.xml" value="grammars/PoorlyOverloaded.xml"/>
        <property name="testcase.xml" value="testcases/FirstTest.xml"/>
        <property name="classname" value="Test"/>
        <property name="cppclassname" value="CppTestReducer"/>
        <property name="cppmain" value="src/cpp/Main.cpp"/>
        <property name="cpp.compiler" value="c++"/>
        <property name="cpp.default.grammar" value="grammars/CppOverloaded.xml"/>
        <property name="cpp.default.testcase" value="testcases/CppFirst.xml"/>

    </target>

    <target name="cleanBuildAndTest" depends="clean,buildJar,compile,allTests"/>

    <target name="cppGen" depends="init">
        <antcall target="cppGenerateAndCompile">
            <param name="grammar.xml" value="${cpp.default.grammar}"/>
            <param name="testcase.xml" value="${cpp.default.testcase}"/>
        </antcall>
    </target>

    <target name="clean" depends="init">
        <!-- Remove VIM backup files.  -->
        <delete>
            <fileset dir="${basedir}" includes="**/*.*~" defaultexcludes="no"/>
        </delete>

        <delete dir="${classes.dir}" />
        <delete dir="${dump.dir}" />
        <delete dir="${gensrc.dir}" />
    </target>

    <target name="help">
    <echo>
cleanBuildAndTest - clean, build, and test
allTests - run java tests
    </echo>
    </target>

    <target name="buildJar" depends="init">
        <ant dir="${jburg.home}" target="jar"/>
    </target>
	<!-- Compile test articles. -->
	<target name="compile" depends="init"
                        description="Build and compile source files">
		<mkdir dir="${classes.dir}" />

		<javac
			debug="${debug.symbols}"
			destdir="${classes.dir}" includes="**/*.java"
			>
            <classpath>
                <pathelement path="${jburg.jar}"/>
            </classpath>
			<src path="${src.dir}"/>
		</javac>
	</target>

    <target name="allTests" depends="init">
        <antcall target="calculator">
            <param name="testcase.xml" value="testcases/FirstTest.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="testcase.xml" value="testcases/VariadicPatterns.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="grammar.xml" value="grammars/PreCallback.xml"/>
            <param name="testcase.xml" value="testcases/PreCallback.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="grammar.xml" value="grammars/MultiplePredicates.xml"/>
            <param name="testcase.xml" value="testcases/MultiplePredicates.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="grammar.xml" value="grammars/StrictTypeAddition.xml"/>
            <param name="testcase.xml" value="testcases/StrictTypeAddition.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="grammar.xml" value="grammars/NullTolerant.xml"/>
            <param name="testcase.xml" value="testcases/NullTolerant.xml"/>
        </antcall>
        <antcall target="calculator">
            <param name="grammar.xml" value="grammars/NestedAddition.xml"/>
            <param name="testcase.xml" value="testcases/NestedAddition.xml"/>
        </antcall>
        <antcall target="dumpLoad">
            <param name="testcase.xml" value="testcases/FirstTest.xml"/>
        </antcall>
        <antcall target="javaGen"/>
        <antcall target="javaGen">
            <param name="testcase.xml" value="testcases/VariadicPatterns.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/PreCallback.xml"/>
            <param name="testcase.xml" value="testcases/PreCallback.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/ErrorTolerant.xml"/>
            <param name="testcase.xml" value="testcases/ErrorTolerant.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/CanProduce.xml"/>
            <param name="testcase.xml" value="testcases/CanProduce.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/TransitiveClosures.xml"/>
            <param name="testcase.xml" value="testcases/TransitiveClosures.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/StrictTypeAddition.xml"/>
            <param name="testcase.xml" value="testcases/StrictTypeAddition.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/NullTolerant.xml"/>
            <param name="testcase.xml" value="testcases/NullTolerant.xml"/>
        </antcall>
        <antcall target="javaGen">
            <param name="grammar.xml" value="grammars/NestedAddition.xml"/>
            <param name="testcase.xml" value="testcases/NestedAddition.xml"/>
        </antcall>
        <antcall target="cppGenerateAndCompile">
            <param name="grammar.xml" value="grammars/CppOverloaded.xml"/>
            <param name="testcase.xml" value="testcases/CppFirst.xml"/>
        </antcall>
        <antcall target="cppGenerateAndCompile">
            <param name="grammar.xml" value="grammars/CppErrorTolerant.xml"/>
            <param name="testcase.xml" value="testcases/CppErrorTolerant.xml"/>
        </antcall>
        <antcall target="cppGenerateAndCompile">
            <param name="grammar.xml" value="grammars/CppOverloaded.xml"/>
            <param name="testcase.xml" value="testcases/CppCanProduce.xml"/>
        </antcall>
    </target>

    <target name="calculator" depends="init">
        <echo>Testing ${testcase.xml}</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="testGrammar" depends="compile">
        <echo>Testing ${grammar.xml} and ${testcase.xml}</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="dumpLoad" depends="compile">
        <echo>Dumping to ${dump.dir}/dumpTest.xml</echo>
        <mkdir dir="${dump.dir}"/>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-dump"/>
            <arg value="${dump.dir}/dumpTest.xml"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
        <echo>Loading from ${dump.dir}/dumpTest.xml</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-load"/>
            <arg value="${dump.dir}/dumpTest.xml"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="loadTest" depends="jar,compile">
        <echo>Loading from ${dump.xml}</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-load"/>
            <arg value="${dump.xml}"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="javaGen" depends="compile">
        <!-- Mini cleanup -->
        <delete file="${classes.dir}/${classname}.class"/>
        <delete dir="${gensrc.dir}"/>
        <mkdir dir="${gensrc.dir}"/>

        <echo>Generating Nonterminal.java from ${grammar.xml}</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-templates"/>
            <arg value="javaNonterminals.stg"/>
            <arg value="-classname"/>
            <arg value="Nonterminal"/>
            <arg value="-dump"/>
            <arg value="${gensrc.dir}/Nonterminal.java"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
        <!-- Ensure we have the correct Nonterminal class
        before we compile the test reducer.
        -->
        <delete file="${classes.dir}/Nonterminal.class"/>
		<javac
			debug="${debug.symbols}"
			destdir="${classes.dir}" includes="Nonterminal.java"
			>
            <classpath>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="classes"/>
            </classpath>
			<src path="${gensrc.dir}"/>
		</javac>
        <echo>Generating ${classname}.java from ${grammar.xml}</echo>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-templates"/>
            <arg value="java.stg"/>
            <arg value="-classname"/>
            <arg value="${classname}"/>
            <arg value="-dump"/>
            <arg value="${gensrc.dir}/${classname}.java"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
		<javac
			debug="${debug.symbols}"
			destdir="${classes.dir}" includes="${classname}.java"
			>
            <classpath>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="classes"/>
            </classpath>
			<src path="${gensrc.dir}"/>
		</javac>
        <echo message="Testing generated reducer ${classname} with ${testcase.xml}"/>
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-reducer"/>
            <arg value="${classname}"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="javaRerun" depends="init">
        <java classname="TestRunner" fork="true" failonerror="true">
            <arg value="-reducer"/>
            <arg value="${classname}"/>
            <arg value="${testcase.xml}"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
    </target>

    <target name="cppGenerateAndCompile" depends="init">
        <mkdir dir="${gensrc.dir}"/>
        <echo>Generating ${cppclassname}.h from ${grammar.xml}</echo>
        <java classname="jburg.util.GenerateHostBURM" fork="true" failonerror="true">
            <!-- Uncomment and substitute a pattern that matches
                 the operator of interest to trace its generation.
            <arg value="-verbose"/>
            <arg value=".*Add.1.*"/>
            -->
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-classname"/>
            <arg value="${cppclassname}"/>
            <arg value="-nodeClass"/>
            <arg value="Node"/>
            <arg value="-nonterminalClass"/>
            <arg value="Nonterminal"/>
            <arg value="-nodeTypeClass"/>
            <arg value="NodeType"/>
            <arg value="-include"/>
            <arg value="Test.h"/>
            <arg value="-include"/>
            <arg value="Nonterminals.h"/>
            <arg value="-visitor"/>
            <arg value="Calculator"/>
            <arg value="-templateGroup"/>
            <arg value="cppHeader.stg"/>
            <arg value="-output"/>
            <arg value="${gensrc.dir}/${cppclassname}.h"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>

        <echo>Generating Nonterminals.h from ${grammar.xml}</echo>
        <java classname="jburg.util.GenerateHostBURM" fork="true" failonerror="true">
            <!-- Uncomment and substitute a pattern that matches
                 the operator of interest to trace its generation.
            <arg value="-verbose"/>
            <arg value=".*Add.1.*"/>
            -->
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-classname"/>
            <arg value="${cppclassname}"/>
            <arg value="-nodeClass"/>
            <arg value="Node"/>
            <arg value="-nonterminalClass"/>
            <arg value="Nonterminal"/>
            <arg value="-nodeTypeClass"/>
            <arg value="NodeType"/>
            <arg value="-visitor"/>
            <arg value="Calculator"/>
            <arg value="-templateGroup"/>
            <arg value="cppNonterminals.stg"/>
            <arg value="-output"/>
            <arg value="${gensrc.dir}/Nonterminals.h"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>

        <echo>Generating NonterminalLookup.h from ${grammar.xml}</echo>
        <java classname="jburg.util.GenerateHostBURM" fork="true" failonerror="true">
            <!-- Uncomment and substitute a pattern that matches
                 the operator of interest to trace its generation.
            <arg value="-verbose"/>
            <arg value=".*Add.1.*"/>
            -->
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-classname"/>
            <arg value="${cppclassname}"/>
            <arg value="-nodeClass"/>
            <arg value="Node"/>
            <arg value="-nonterminalClass"/>
            <arg value="Nonterminal"/>
            <arg value="-nodeTypeClass"/>
            <arg value="NodeType"/>
            <arg value="-visitor"/>
            <arg value="Calculator"/>
            <arg value="-templateGroup"/>
            <arg value="cppNonterminalsLookup.stg"/>
            <arg value="-output"/>
            <arg value="${gensrc.dir}/NonterminalLookup.h"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>

        <echo>Generating ${cppclassname}.cpp from ${grammar.xml}</echo>
        <java classname="jburg.util.GenerateHostBURM" fork="true" failonerror="true">
            <arg value="-grammar"/>
            <arg value="${grammar.xml}"/>
            <arg value="-templateGroup"/>
            <arg value="cppDefinition.stg"/>
            <arg value="-classname"/>
            <arg value="${cppclassname}"/>
            <arg value="-nodeClass"/>
            <arg value="Node"/>
            <arg value="-nonterminalClass"/>
            <arg value="Nonterminal"/>
            <arg value="-nodeTypeClass"/>
            <arg value="NodeType"/>
            <arg value="-visitor"/>
            <arg value="Calculator"/>
            <arg value="-include"/>
            <arg value="${cppclassname}.h"/>
            <arg value="-output"/>
            <arg value="${gensrc.dir}/${cppclassname}.cpp"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${jburg.jar}"/>
                <pathelement path="${stringtemplate.jar}"/>
            </classpath>
            <jvmarg value="-ea"/>
        </java>
        <sequential>
            <echo message="Compiling gensrc/${cppclassname} using ${cpp.compiler}"/>
            <delete file="gensrc/CppTest"/>
            <exec executable="${cpp.compiler}" failonerror="true">
                <arg value="-g"/>
                <arg value="-I"/>
                <arg value="gensrc"/>
                <arg value="-I"/>
                <arg value="src/cpp/include"/>
                <arg value="-std=c++11"/>
                <arg value="${cppmain}"/>
                <arg value="src/cpp/TestcaseBuilder.cpp"/>
                <arg value="gensrc/${cppclassname}.cpp"/>
                <arg value="-o"/>
                <arg value="gensrc/${cppclassname}"/>
            </exec>
            <!-- vmlauncher="false" so the exec finds the right relative path -->
            <echo message="Executing gensrc/${cppclassname} ${testcase.xml}"/>
            <exec executable="gensrc/${cppclassname}" vmlauncher="false" failonerror="true">
                <arg value="${testcase.xml}"/>
            </exec>
        </sequential>
    </target>

    <target name="jar">
        <ant dir="../.." target="jar"/>
    </target>

</project>
